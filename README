<!-- PROJECT HEADER -->
<p align="center">
  <img src="https://img.shields.io/badge/Java-21-blue" alt="Java 21">
  <img src="https://img.shields.io/badge/Spring%20Boot-3.x-brightgreen" alt="Spring Boot 3">
  <img src="https://img.shields.io/badge/Build-Maven-orange" alt="Maven">
  <img src="https://img.shields.io/badge/DB-H2%20%7C%20Flyway-informational" alt="H2/Flyway">
  <img src="https://img.shields.io/badge/Auth-JWT-important" alt="JWT">
</p>

<h1 align="center">SafeYardApi</h1>
<p align="center">Backend Java (Spring Boot) para gestão de <b>pátios de motos</b> com autenticação JWT, migrações Flyway, documentação Swagger e interface web com Thymeleaf.</p>

<p align="center">
  <a href="#-objetivo-do-projeto">Objetivo</a> •
  <a href="#-stack">Stack</a> •
  <a href="#-estrutura-de-pacotes">Estrutura</a> •
  <a href="#-como-executar-modo-dev">Executar</a> •
  <a href="#-documentação-da-api">API</a> •
  <a href="#-exemplos-curl">Curl</a> •
  <a href="#-docker-opcional">Docker</a> •
  <a href="#-desenvolvedores">Devs</a>
</p>

---

## 🎯 Objetivo do Projeto
O **SafeYard** é uma aplicação Java (Spring Boot) inspirada no cenário da **Mottu**, criada para **modernizar e otimizar a gestão de pátios de motos**. A solução oferece:

- **API REST segura (JWT)** para **motos, clientes, locações e registros**;
- **Interface web (Thymeleaf)** para **Administradores** (gestão da frota/locações) e **Clientes** (minhas locações);
- **Regras de negócio** que **evitam erros manuais** (sem dupla locação, apenas motos `DISPONIVEL`, encerramento atualiza status);
- **Rastreabilidade** com **Flyway** (migrations/seeds) e **H2 Console** para inspeção.

> **Resultados esperados:** mais controle operacional, menos inconsistências e **experiência simples**: *login → locação → encerramento → relatórios*.

**Metas demonstráveis na banca:**
1) Criar locação **sem conflitos**; 2) **Encerrar** locação atualizando a moto; 3) Cliente vê **histórico** e Admin a **frota**; 4) **Swagger + Authorize (JWT)** funcionando.

---

## 🔧 Stack
- Java **21** · Spring Boot **3.x** (Web, Validation, JPA/Hibernate, Security)
- Auth: **JWT** (`com.auth0:java-jwt`)
- Banco: **H2** (dev) · opcional Postgres/MySQL (prod)
- Migrações: **Flyway** (`src/main/resources/db/migration`)
- Views: **Thymeleaf** (layouts + páginas)
- Docs: **springdoc-openapi** (`/swagger-ui.html`)
- Build: **Maven** · DevOps: Dockerfile + script

---

## 🗂️ Domínio (resumo)
- **Cliente** – dados cadastrais (pode possuir motos)
- **Moto** – placa, modelo, chassi, fotoUrl, status: `DISPONIVEL` · `LOCADA` · `MANUTENCAO`
- **Locacao** – check-in/check-out da moto (datas, condições, cliente, moto)
- **RegistroMotoPatio** – histórico de movimentações (relatórios)
- **User / UserRole / Token** – autenticação/autorização

---

## 📁 Estrutura de pacotes
```
src/main/java/com/safeyard/safeyard_api/
 ├─ config/        # CORS, Security, Swagger, Web + seed e init de storage
 ├─ controller/    # REST + Web (Thymeleaf) – Auth, Cliente, Moto, Locacao, Registro
 ├─ dto/           # DTOs (Form, View e Responses de Auth)
 ├─ exception/     # Handler global e payload de erro
 ├─ model/         # Entidades JPA + enums
 ├─ repository/    # Spring Data JPA
 ├─ service/       # Regras + fachadas (Locacao) + Auth/JWT
 └─ SafeyardApiApplication.java
```
> Migrações ficam em `resources/db.migration` (schema/índices/seeds/regras).

---

## ▶️ Como Executar (modo DEV)
1. **Pré-requisitos**: JDK **21**, Maven, porta **8080** livre.
2. **Clonar**: `git clone <repo>` e `cd SafeYardApi`
3. **Rodar**: `./mvnw spring-boot:run` (Linux/Mac) · `mvnw spring-boot:run` (Windows)
4. **Acesso rápido**:
   - Web (Thymeleaf): `http://localhost:8080/login`
   - Swagger: `http://localhost:8080/swagger-ui.html`
   - H2 Console: `http://localhost:8080/h2-console` (JDBC: `jdbc:h2:file:./data/safeyard`)

> **Dev profile** já preparado: primeira execução roda **Flyway** e cria schema + seeds.

---

## 🔐 Contas de Teste (seed)
- **Cliente**: `cliente@safeyard.com` · **123456**
- **Admin**: `admin@safeyard.com` · **123456**
- **Funcionário**: `func@safeyard.com` · **123456**

> Ao logar, o **Dashboard** muda conforme o papel (cliente/admin).

---

## 📘 Documentação da API
- **Swagger/OpenAPI**: `http://localhost:8080/swagger-ui.html`
- **Segurança**: **Bearer JWT** – faça login, copie o token e clique em **Authorize** no Swagger.

### Endpoints (principais)
**Auth**
`POST /api/auth/login` → `{ token, name, role }` · `POST /api/auth/register` *(demo)*

**Motos** *(ADMIN/FUNC · leitura CLIENTE)*
`GET /api/motos?page=&size=&sort=` · `GET /api/motos/{id}` · `POST /api/motos` · `PUT/DELETE /api/motos/{id}`

**Locações** *(CLIENTE/ADMIN)*
`GET /api/locacoes` · `GET /api/locacoes/{id}` · `POST /api/locacoes` · `PUT /api/locacoes/{id}/encerrar`

**Clientes / Registros**
`GET /api/clientes...` · `GET /api/registros`

---

## 🧪 Exemplos (curl)
**Login**
```bash
curl -X POST http://localhost:8080/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"cliente@safeyard.com","password":"123456"}'
```
**Listar motos (com Bearer)**
```bash
TOKEN=ey... # copie do login
curl -H "Authorization: Bearer $TOKEN" http://localhost:8080/api/motos
```
**Criar locação**
```bash
curl -X POST http://localhost:8080/api/locacoes \
  -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" \
  -d '{
    "motoId": 1,
    "clienteId": 1,
    "condicaoEntrega": "tanque cheio, sem avarias",
    "devolucaoPrevista": "2025-10-05T18:00:00"
  }'
```

---

## 🐳 Docker (opcional)
**Dockerfile (resumo)**
```dockerfile
FROM eclipse-temurin:21-jdk
WORKDIR /app
COPY . .
RUN sed -i 's/\r$//' mvnw && chmod +x mvnw
RUN ./mvnw -B -DskipTests clean package
EXPOSE 8080
CMD ["sh","-c","java -Dserver.port=${PORT:-8080} -Dspring.profiles.active=${SPRING_PROFILES_ACTIVE:-dev} -jar target/safeyard-api-*.jar"]
```
**Build & run**
```bash
docker build -t safeyard-api .
docker run --rm -p 8080:8080 --name safeyard safeyard-api
```

---

## 🔍 Troubleshooting
- **H2 Console não abre** → confira `spring.h2.console.enabled=true` e a URL JDBC acima.
- **JWT 401** → faça login novamente e cole **apenas** o token no Authorize.
- **Flyway falhou** → apague a pasta `data/` (somente em dev) e rode novamente.
- **Porta 8080 ocupada** → use `server.port=8081` em `application-dev.properties`.

---

## 👨‍💻 Desenvolvedores
- **Thamires Ribeiro Cruz** — RM558128 · <a href="https://github.com/ThamiresRC">github.com/ThamiresRC</a>
- **Adonay Rodrigues da Rocha** — RM558782 · <a href="https://github.com/AdonayRocha">github.com/AdonayRocha</a>
- **Pedro Henrique Martins dos Reis** — RM555306 · <a href="https://github.com/pxxmdr">github.com/pxxmdr</a>

---

## 📜 Licença
Uso acadêmico/educacional.
