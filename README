# 🚨 SafeYard API

**SafeYard** é uma API REST desenvolvida em Java com Spring Boot para gerenciar a **entrada, saída, locação e controle de motos** em um pátio. O projeto foi construído com base nos padrões de arquitetura utilizados em aula, incluindo boas práticas de validação, DTOs, tratamento global de erros, filtros dinâmicos e autenticação via JWT.

---

## 🛠️ Tecnologias Utilizadas

- Java 17
- Spring Boot 3.4.3
- Maven
- Spring Web
- Spring Data JPA
- Bean Validation
- H2 Database (memória)
- Lombok
- Swagger (SpringDoc OpenAPI)
- Spring Security + JWT (Auth0)
- DevTools
- Cache (pronto para uso futuro)

---

## 🔧 Pré-requisitos

- Java 17
- Maven

---

## 🗂️ Funcionalidades

### ✅ Cadastro e Gerenciamento de:
- **Motos** (`/api/motos`)
- **Clientes** (`/api/clientes`)
- **Locações** (`/api/locacoes`)
- **Entradas e saídas no pátio** (`/api/registros`)

### ✅ Autenticação JWT:
- **Login** de usuários
- **Geração de token JWT**
- **Proteção de rotas** privadas
- **Validação automática de token** via filtro

> 📌 O token deve ser informado no header `Authorization: Bearer <token>` para acessar os endpoints protegidos.

### ✅ Filtros disponíveis:
- 📆 Locação por cliente, moto, período de saída/devolução
- 📍 Registros por moto, tipo (`entrada/saida`) e período

---

## 🧠 Cache com Spring

A API está preparada para uso de **cache automatizado**, melhorando a performance de consultas em endpoints com filtros dinâmicos.

### 🔄 Endpoints com cache habilitado:
- 🔎 `GET /api/motos`
- 🔎 `GET /api/clientes`
- 🔎 `GET /api/locacoes` (com filtros por período, cliente e moto)
- 🔎 `GET /api/registros` (com filtros por período, tipo e moto)

> O cache é limpo automaticamente em operações de `POST`, `PUT` e `DELETE` para garantir consistência dos dados.

---

### 🔐 Login e geração de token:
```bash
curl -X POST http://localhost:8080/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"admin@email.com","senha":"123456"}'

📄 Buscar todas as motos:
curl -H "Authorization: Bearer SEU_TOKEN_JWT" http://localhost:8080/api/motos

🔎 Buscar locações por cliente e período:
curl -G http://localhost:8080/api/locacoes \
  --data-urlencode "clienteId=1" \
  --data-urlencode "inicio=2025-05-01T00:00:00" \
  --data-urlencode "fim=2025-05-31T23:59:59" \
  -H "Authorization: Bearer SEU_TOKEN_JWT"





## ▶️ Executar localmente

```bash
# Clonar o repositório
git clone https://github.com/ThamiresRC/SafeYardApi

# Entrar na pasta
cd safeyard-api

# Executar o projeto
./mvnw spring-boot:run

---

## 🐳 Executar via Docker (sem clonar o projeto)

Você pode rodar a aplicação diretamente com:

```bash
docker run -p 8080:8080 thamiresrc/safeyard-api



👨‍💻 Desenvolvedores

Thamires Ribeiro Cruz           RM558128 github.com/ThamiresRC
Adonay Rodrigues da Rocha       RM558782 github.com/AdonayRocha
Pedro Henrique Martins dos Reis RM555306 github.com/pxxmdr